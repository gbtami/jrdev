To implement hover highlighting for AssetBox while maintaining its dynamic color capabilities, we'll use Qt's stylesheet pseudo-states and enhance the existing color handling.

**Changes needed:**

1. Enable hover detection in constructor
2. Modify UpdateColor() to handle hover states in stylesheet
3. Adjust hover colors based on original color parameters

```json
{
  "file_changes": [
    {
      "filename": "assetbox.cpp",
      "change_type": "modify",
      "start_line": 17,
      "end_line": 17,
      "replacement": [
        "    : QFrame(parent)",
        "    , m_assetName(assetName)",
        "    setAttribute(Qt::WA_Hover);  // Enable hover detection"
      ]
    },
    {
      "filename": "assetbox.cpp",
      "change_type": "replace",
      "start_line": 77,
      "end_line": 92,
      "replacement": [
        "void AssetBox::UpdateColor(const QColor& color)",
        "{",
        "    // Create color variations",
        "    QColor bgColor = color;",
        "    bgColor.setAlpha(128);  // 50% opacity",
        "    ",
        "    QColor hoverBg = color;",
        "    hoverBg.setAlpha(200);  // More opaque on hover",
        "    ",
        "    QColor hoverBorder = color.lighter(150);  // 50% lighter border",
        "    ",
        "    // Build stylesheet with hover state",
        "    QString styleSheet = QString(",
        "        \"AssetBox { \"",
        "        \"  background-color: rgba(%1, %2, %3, %4); \"",
        "        \"  border: 2px solid %5; \"",
        "        \"  border-radius: 4px; \"",
        "        \"} \"",
        "        \"AssetBox:hover { \"",
        "        \"  background-color: rgba(%1, %2, %3, %6); \"",
        "        \"  border: 2px solid %7; \"",
        "        \"} \"",
        "        \"QLabel { color: white; }\"",
        "    ).arg(color.red()).arg(color.green()).arg(color.blue())",
        "     .arg(bgColor.alpha())  // Normal state alpha",
        "     .arg(color.name())     // Original border color",
        "     .arg(hoverBg.alpha())  // Hover state alpha",
        "     .arg(hoverBorder.name());  // Hover border color",
        "    ",
        "    setStyleSheet(styleSheet);",
        "}"
      ]
    }
  ]
}
```

**Implementation rationale:**
1. `WA_Hover` ensures proper hover event processing
2. Hover effect uses:
   - 78% opaque background (up from 50%)
   - 50% lighter border color
   - Smooth transition via CSS pseudo-state
3. Maintains original color theming while enhancing interactivity
4. No need for manual event handling - pure CSS approach

The hover effect will automatically update whenever `UpdateColor()` is called, maintaining visual consistency with the current color scheme.
